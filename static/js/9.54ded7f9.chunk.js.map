{"version":3,"sources":["components/modules/reduxFormFields/index.js","utils/validators/index.js","components/modules/reduxFormFields/style.module.scss","components/Body/Login/Login.module.scss","components/Body/Login/Login.js"],"names":["TextareaField","input","meta","touched","error","props","hasError","className","styles","reduxFormFields","htmlFor","name","label","TextArea","errorSpan","InputField","autoComplete","CheckBoxField","createField","component","validators","text","validate","max","requiredField","value","maxLength10","length","module","exports","LoginReduxForm","reduxForm","form","handleSubmit","captchaUrl","loginForm","onSubmit","type","src","alt","login_summaryError","htmlType","connect","state","authPart","isAuth","login","to","formData"],"mappings":"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","file":"static/js/9.54ded7f9.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './style.module.scss'\nimport { Field } from 'redux-form';\nimport { Input, Checkbox } from 'antd'\n\n\nexport const TextareaField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? `${styles.reduxFormFields} ${styles.error}` : styles.reduxFormFields}>\n      <div className={'reduxInputField'}>\n        <label htmlFor={input.name}>\n          {props.label && <span>{`${props.label}:`}</span>}\n        </label>\n        <Input.TextArea {...input} {...props} />\n      </div>\n      {hasError && <span className={styles.errorSpan}>{error}</span>}\n    </div>\n  )\n}\nexport const InputField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? `${styles.reduxFormFields} ${styles.error}` : styles.reduxFormFields}>\n      <div className={'reduxInputField'}>\n        <label htmlFor={input.name}>\n          {props.label && <span>{`${props.label}:`}</span>}\n        </label>\n        <Input {...input} {...props} autoComplete='off' />\n      </div>\n      {hasError && <span className={styles.errorSpan}>{error}</span>}\n    </div >\n  )\n}\n\n// const parentSelector = (node, parent) => {\n//   if (node.nodeName !== parent) {\n//     return parentSelector(node.parentNode, parent)\n//   } else {\n//     return node\n//   }\n// }\n\nexport const CheckBoxField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n\n  return (\n    <div>\n      <div className='reduxCheckboxField'>\n        <Checkbox\n          {...props}\n          {...input}\n        >\n          {props.label}\n        </Checkbox>\n        {/* <Switch\n          {...props}\n          {...input}\n          defaultChecked\n          onChange={(checked, event) => {\n            parentSelector(event.target, 'BUTTON').setAttribute('value', !checked);\n          }}\n        /> */}\n      </div>\n      {hasError && <span className={hasError ? styles.error : ''}>{error}</span>}\n    </div>\n  )\n}\n\nexport const createField = (name, component, label, validators = [], props = {}, text = \"\", className = \"\") => (\n  <div className={className}>\n    <Field\n      name={name}\n      component={component}\n      label={label}\n      validate={validators}\n      {...props} /> {text}\n  </div>\n)\n\n","export const requiredField = value => {\n  if (value) return undefined;\n  return 'Field is required';\n}\n\nexport const maxLength = max => value => {\n  if (value && value.length > max) return `Max length > ${max}`\n  return undefined;\n}\n\nexport const maxLength10 = maxLength(10)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reduxFormFields\":\"style_reduxFormFields__3ce72\",\"error\":\"style_error__3ESqE\",\"errorSpan\":\"style_errorSpan__g816S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"Login_loginForm__29EbJ\"};","import React from 'react'\nimport styles from './Login.module.scss'\nimport { reduxForm } from 'redux-form'\nimport { login } from '../../../reducers/reducer_auth'\nimport { InputField, createField, CheckBoxField } from '../../modules/reduxFormFields'\nimport { requiredField } from '../../../utils/validators'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { Button } from 'antd'\n\nconst Login = ({ handleSubmit, error, captchaUrl }) => {\n  // console.log(props);\n  return (\n    <form className={styles.loginForm} onSubmit={handleSubmit}>\n      {createField('email', InputField, 'Email', [requiredField], { type: 'email' })}\n      {createField('password', InputField, 'Password', [requiredField], { type: 'password' })}\n      {createField('rememberMe', CheckBoxField, null, [], { label: 'Remember me' })}\n      {captchaUrl &&\n        <div>\n          <img src={captchaUrl} alt='' />\n          {createField('captcha', InputField, 'Enter captcha code...', [requiredField])}\n        </div>\n      }\n\n      <div className={styles.login_summaryError}>\n        {error && error}\n      </div>\n      <div>\n        <Button htmlType='submit' type='primary'>Login</Button>\n      </div>\n    </form>\n  )\n}\n\nconst LoginReduxForm = reduxForm({ form: 'login' })(Login)\n\nconst LoginForm = (props) => {\n  const onSubmit = (formData) => {\n    // console.log(formData.email, formData.password);\n    props.login(formData)\n  }\n\n  if (props.isAuth) return <Redirect to='/profile' />\n\n\n  return <div className={styles.login}>\n    <h1>LOGIN</h1>\n    <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\n  </div>\n}\nconst mapStateToProps = (state) => ({\n  captchaUrl: state.authPart.captchaUrl,\n  isAuth: state.authPart.isAuth\n})\n\nexport default connect(mapStateToProps, { login })(LoginForm)\n"],"sourceRoot":""}