{"version":3,"sources":["components/modules/reduxFormFields/index.js","utils/validators/index.js","components/modules/reduxFormFields/style.module.scss","components/Body/Dialogs/Dialogs.module.scss","components/Body/Dialogs/Form/Form.module.scss","components/Body/Dialogs/Form/Form.js","components/Body/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Body/Dialogs/Container.js"],"names":["TextareaField","input","meta","touched","error","props","hasError","className","styles","reduxFormFields","htmlFor","name","label","TextArea","errorSpan","InputField","autoComplete","CheckBoxField","createField","component","validators","text","validate","max","requiredField","value","maxLength10","length","module","exports","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","type","Dialogs","friendsElement","dialogPage","friends","map","obj","activeClassName","a_active","to","id","key","messagesElement","messages","message","dialogs","dialogs_wrapper","dialogs_wrapper_friends","dialogs_wrapper_messages","values","sendMessage","textarea","mapStateToPropsForRedirect","state","isAuth","authPart","compose","connect","dispatch","newMessage","sendMessageAC","Component","RedirectComponent","this","React","PageItemsDialogs"],"mappings":"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","file":"static/js/8.de69b9c8.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './style.module.scss'\nimport { Field } from 'redux-form';\nimport { Input, Checkbox } from 'antd'\n\n\nexport const TextareaField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? `${styles.reduxFormFields} ${styles.error}` : styles.reduxFormFields}>\n      <div className={'reduxInputField'}>\n        <label htmlFor={input.name}>\n          {props.label && <span>{`${props.label}:`}</span>}\n        </label>\n        <Input.TextArea {...input} {...props} />\n      </div>\n      {hasError && <span className={styles.errorSpan}>{error}</span>}\n    </div>\n  )\n}\nexport const InputField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n  return (\n    <div className={hasError ? `${styles.reduxFormFields} ${styles.error}` : styles.reduxFormFields}>\n      <div className={'reduxInputField'}>\n        <label htmlFor={input.name}>\n          {props.label && <span>{`${props.label}:`}</span>}\n        </label>\n        <Input {...input} {...props} autoComplete='off' />\n      </div>\n      {hasError && <span className={styles.errorSpan}>{error}</span>}\n    </div >\n  )\n}\n\n// const parentSelector = (node, parent) => {\n//   if (node.nodeName !== parent) {\n//     return parentSelector(node.parentNode, parent)\n//   } else {\n//     return node\n//   }\n// }\n\nexport const CheckBoxField = ({ input, meta: { touched, error }, ...props }) => {\n  const hasError = touched && error;\n\n  return (\n    <div>\n      <div className='reduxCheckboxField'>\n        <Checkbox\n          {...props}\n          {...input}\n        >\n          {props.label}\n        </Checkbox>\n        {/* <Switch\n          {...props}\n          {...input}\n          defaultChecked\n          onChange={(checked, event) => {\n            parentSelector(event.target, 'BUTTON').setAttribute('value', !checked);\n          }}\n        /> */}\n      </div>\n      {hasError && <span className={hasError ? styles.error : ''}>{error}</span>}\n    </div>\n  )\n}\n\nexport const createField = (name, component, label, validators = [], props = {}, text = \"\", className = \"\") => (\n  <div className={className}>\n    <Field\n      name={name}\n      component={component}\n      label={label}\n      validate={validators}\n      {...props} /> {text}\n  </div>\n)\n\n","export const requiredField = value => {\n  if (value) return undefined;\n  return 'Field is required';\n}\n\nexport const maxLength = max => value => {\n  if (value && value.length > max) return `Max length > ${max}`\n  return undefined;\n}\n\nexport const maxLength10 = maxLength(10)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"reduxFormFields\":\"style_reduxFormFields__3ce72\",\"error\":\"style_error__3ESqE\",\"errorSpan\":\"style_errorSpan__g816S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1NvvX\",\"dialogs_wrapper\":\"Dialogs_dialogs_wrapper__18nUO\",\"dialogs_wrapper_friends\":\"Dialogs_dialogs_wrapper_friends__WB9Fw\",\"a_active\":\"Dialogs_a_active__1WYT5\",\"dialogs_wrapper_messages\":\"Dialogs_dialogs_wrapper_messages__3kgvT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__4Wexm\"};","import React from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport { TextareaField } from '../../../modules/reduxFormFields'\nimport { requiredField, maxLength10 } from '../../../../utils/validators'\nimport styles from './Form.module.scss'\nimport { Button } from 'antd'\n\nconst Form = (props) => {\n  return (\n    <form className={styles.form} onSubmit={props.handleSubmit}>\n      <div>\n        <Field name='textarea' component={TextareaField} placeholder='Write a message...' validate={[requiredField, maxLength10]} />\n      </div>\n      <div><Button type='primary'>Send</Button></div>\n    </form>\n  )\n}\n\nexport default reduxForm({ form: 'dialogs-add-message' })(Form)\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport styles from './Dialogs.module.scss'\nimport Form from \"./Form/Form\"\n\nconst Dialogs = (props) => {\n\n  const friendsElement = props.dialogPage.friends.map(obj =>\n    <NavLink activeClassName={styles.a_active} to={`/dialogs/${obj.id}`} key={obj.id}>{obj.name}</NavLink>\n  )\n  const messagesElement = props.dialogPage.messages.map(obj =>\n    <div key={obj.id}>{obj.message}</div>\n  )\n\n  const addNewMessage = (values) => {\n    props.sendMessage(values.textarea);\n  }\n\n  return (\n    <div className={styles.dialogs}>\n      <h1>Dialogs</h1>\n      <div className={styles.dialogs_wrapper}>\n        <div className={styles.dialogs_wrapper_friends}>\n          {friendsElement}\n        </div>\n        <div className={styles.dialogs_wrapper_messages}>\n          {messagesElement}\n          <Form onSubmit={addNewMessage} />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Dialogs;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToPropsForRedirect = (state) => ({\n  isAuth: state.authPart.isAuth\n})\n\nexport const withAuthRedirect = (Component) => {\n\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Redirect to={'/login'} />\n      return <Component {...this.props} />\n    }\n  }\n\n  return connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n}\n","import PageItemsDialogs from \"./Dialogs\";\nimport { sendMessageAC } from '../../../reducers/reducer_dialogs'\nimport { connect } from \"react-redux\"\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect';\nimport { compose } from \"redux\";\n\nconst mapStateToProps = (state) => ({\n  dialogPage: state.dialogPage\n})\nconst mapDispatchToProps = (dispatch) => ({\n  sendMessage: (newMessage) => {\n    dispatch(sendMessageAC(newMessage));\n  }\n})\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(PageItemsDialogs);\n"],"sourceRoot":""}